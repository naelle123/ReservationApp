const twilio = require('twilio');

// Initialiser le client Twilio avec API Key
const client = twilio(process.env.TWILIO_API_KEY_SID, process.env.TWILIO_API_KEY_SECRET, {
  accountSid: process.env.TWILIO_MAIN_ACCOUNT_SID
});

/**
 * Envoie un SMS via Twilio
 * @param {string} to - Num√©ro de t√©l√©phone destinataire (format international)
 * @param {string} message - Message √† envoyer
 * @returns {Promise<Object>} - R√©sultat de l'envoi
 */
async function sendSMS(to, message) {
  try {
    // V√©rifier que le num√©ro est au format international
    if (!to.startsWith('+')) {
      throw new Error('Le num√©ro de t√©l√©phone doit √™tre au format international (+237...)');
    }

    const result = await client.messages.create({
      body: message,
      from: process.env.TWILIO_PHONE_NUMBER,
      to: to
    });

    console.log(`‚úÖ SMS envoy√© avec succ√®s √† ${to}. SID: ${result.sid}`);
    return {
      success: true,
      sid: result.sid,
      to: to,
      message: message
    };
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'envoi du SMS √† ${to}:`, error.message);
    return {
      success: false,
      error: error.message,
      to: to,
      message: message
    };
  }
}

/**
 * Envoie un SMS de notification de r√©servation
 */
async function sendReservationSMS(telephone, nomUtilisateur, nomSalle, date, heureDebut, heureFin) {
  const message = `üè¢ R√©servation confirm√©e!\n\nUtilisateur: ${nomUtilisateur}\nSalle: ${nomSalle}\nDate: ${date}\nHeure: ${heureDebut} - ${heureFin}\n\nMerci d'utiliser notre syst√®me de r√©servation.`;
  return await sendSMS(telephone, message);
}

/**
 * Envoie un SMS d'annulation de r√©servation
 */
async function sendCancellationSMS(telephone, nomUtilisateur, nomSalle, date, heureDebut, heureFin) {
  const message = `‚ùå R√©servation annul√©e\n\nUtilisateur: ${nomUtilisateur}\nSalle: ${nomSalle}\nDate: ${date}\nHeure: ${heureDebut} - ${heureFin}\n\nVotre r√©servation a √©t√© annul√©e avec succ√®s.`;
  return await sendSMS(telephone, message);
}

/**
 * Envoie un SMS de notification de salle hors service
 */
async function sendOutOfServiceSMS(telephone, nomUtilisateur, nomSalle) {
  const message = `‚ö†Ô∏è Salle hors service\n\nBonjour ${nomUtilisateur},\n\nLa salle "${nomSalle}" est temporairement hors service. Vos r√©servations ont √©t√© automatiquement annul√©es.\n\nVeuillez nous excuser pour la g√™ne occasionn√©e.`;
  return await sendSMS(telephone, message);
}

/**
 * Envoie un SMS de r√©servation prioritaire (admin)
 */
async function sendPriorityReservationSMS(telephone, nomUtilisateur, nomSalle, date, heureDebut, heureFin) {
  const message = `üîÑ R√©servation modifi√©e\n\nBonjour ${nomUtilisateur},\n\nVotre r√©servation pour la salle "${nomSalle}" le ${date} de ${heureDebut} √† ${heureFin} a √©t√© annul√©e pour cause de r√©servation prioritaire.\n\nNous nous excusons pour ce d√©sagr√©ment.`;
  return await sendSMS(telephone, message);
}

/**
 * Teste l'envoi d'un SMS
 */
async function testSMS(telephone = '+237655000000') {
  const message = `üß™ Test SMS - ${new Date().toLocaleString('fr-FR')}\n\nCeci est un message de test du syst√®me de r√©servation de salles de r√©union.`;
  return await sendSMS(telephone, message);
}

module.exports = {
  sendSMS,
  sendReservationSMS,
  sendCancellationSMS,
  sendOutOfServiceSMS,
  sendPriorityReservationSMS,
  testSMS
};