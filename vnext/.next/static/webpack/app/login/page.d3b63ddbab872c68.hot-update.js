"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/login/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./src/lib/constants.ts\");\n/* harmony import */ var _mockApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mockApi */ \"(app-pages-browser)/./src/lib/mockApi.ts\");\n\n\n\n/// Service API centralisé pour toutes les communications avec le backend\n/// Compatible 100% avec l'API Node.js/Express\nclass ApiService {\n    /// Initialise l'authentification depuis le localStorage\n    initializeAuth() {\n        if (true) {\n            const token = localStorage.getItem(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.TOKEN_KEY);\n            if (token) {\n                this.setAuthToken(token);\n            }\n        }\n    }\n    /// Démarre la vérification périodique de la santé du backend\n    startBackendHealthCheck() {\n        // Vérification initiale\n        this.checkBackendHealth();\n        // Vérification périodique\n        this.backendCheckInterval = setInterval(()=>{\n            this.checkBackendHealth();\n        }, this.BACKEND_CHECK_INTERVAL);\n    }\n    /// Vérifie la disponibilité du backend\n    async checkBackendHealth() {\n        const now = Date.now();\n        // Éviter les vérifications trop fréquentes\n        if (now - this.lastBackendCheck < 5000) {\n            return;\n        }\n        this.lastBackendCheck = now;\n        try {\n            const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(\"\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.API_URL, \"/health\"), {\n                timeout: 5000,\n                validateStatus: (status)=>status < 500\n            });\n            if (response.status === 200) {\n                if (!this.isBackendAvailable) {\n                    console.log(\"✅ Backend reconnect\\xe9 - Passage en mode API\");\n                    this.isBackendAvailable = true;\n                }\n            } else {\n                throw new Error(\"Backend responded with status \".concat(response.status));\n            }\n        } catch (error) {\n            if (this.isBackendAvailable) {\n                console.warn(\"⚠️ Backend indisponible - Passage en mode Mock\");\n                this.isBackendAvailable = false;\n            }\n        }\n    }\n    /// Exécute une requête avec fallback automatique vers le mock\n    async executeWithFallback(apiCall, mockCall) {\n        if (!this.isBackendAvailable) {\n            return mockCall();\n        }\n        try {\n            return await apiCall();\n        } catch (error) {\n            // Si erreur réseau, basculer vers le mock\n            if (error.code === \"NETWORK_ERROR\" || error.code === \"ECONNREFUSED\" || !error.response) {\n                console.warn(\"\\uD83D\\uDD04 Erreur r\\xe9seau - Basculement vers Mock API\");\n                this.isBackendAvailable = false;\n                return mockCall();\n            }\n            throw error;\n        }\n    }\n    /// Configure les intercepteurs pour l'authentification et la gestion d'erreurs\n    setupInterceptors() {\n        // Intercepteur de requête\n        this.api.interceptors.request.use((config)=>{\n            if (this.token) {\n                config.headers.Authorization = \"Bearer \".concat(this.token);\n            }\n            return config;\n        }, (error)=>Promise.reject(error));\n        // Intercepteur de réponse\n        this.api.interceptors.response.use((response)=>response, (error)=>{\n            const apiError = this.handleApiError(error);\n            return Promise.reject(apiError);\n        });\n    }\n    /// Gestion centralisée des erreurs API\n    handleApiError(error) {\n        if (error.response) {\n            const status = error.response.status;\n            const data = error.response.data;\n            let message = _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.SERVER;\n            if (data === null || data === void 0 ? void 0 : data.error) {\n                message = data.error;\n            } else if (data === null || data === void 0 ? void 0 : data.message) {\n                message = data.message;\n            }\n            switch(status){\n                case 401:\n                    message = _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.SESSION_EXPIRED;\n                    this.clearAuth();\n                    break;\n                case 403:\n                    message = _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.UNAUTHORIZED;\n                    break;\n                case 404:\n                    message = _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.NOT_FOUND;\n                    break;\n                case 500:\n                    message = _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.SERVER;\n                    break;\n            }\n            return new Error(message);\n        } else if (error.request) {\n            return new Error(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.NETWORK);\n        } else {\n            return new Error(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.ERRORS.UNKNOWN);\n        }\n    }\n    /// Définit le token d'authentification\n    setAuthToken(token) {\n        this.token = token;\n        if (true) {\n            localStorage.setItem(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.TOKEN_KEY, token);\n        }\n    }\n    /// Supprime le token d'authentification\n    clearAuth() {\n        this.token = null;\n        // Nettoyer aussi le mock\n        if (_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService) {\n            _mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.clearAuth();\n        }\n        if (true) {\n            localStorage.removeItem(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.TOKEN_KEY);\n            localStorage.removeItem(_constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.USER_KEY);\n        }\n    }\n    // ==================== ENDPOINTS D'AUTHENTIFICATION ====================\n    /// Connexion utilisateur - Compatible avec l'API backend\n    async login(credentials) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/auth/login\", credentials);\n            return response.data;\n        }, async ()=>{\n            const result = await _mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.login(credentials);\n            // Synchroniser le token avec le mock\n            if (result.token) {\n                _mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.setAuthToken(result.token);\n            }\n            return result;\n        });\n    }\n    /// Récupération du profil utilisateur\n    async getProfile() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/auth/me\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getProfile());\n    }\n    /// Changement de mot de passe\n    async changePassword(data) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.put(\"/auth/change-password\", data);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.changePassword(data));\n    }\n    // ==================== ENDPOINTS DES SALLES ====================\n    /// Récupération de toutes les salles\n    async getRooms() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/salles\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getRooms());\n    }\n    /// Récupération des salles disponibles pour une période\n    async getAvailableRooms(date, startTime, endTime) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/salles/libres\", {\n                params: {\n                    date,\n                    heure_debut: startTime,\n                    heure_fin: endTime\n                }\n            });\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getAvailableRooms(date, startTime, endTime));\n    }\n    /// Récupération des réservations d'une salle\n    async getRoomReservations(roomId, date) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/salles/\".concat(roomId, \"/reservations\"), {\n                params: {\n                    date\n                }\n            });\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getRoomReservations(roomId, date));\n    }\n    /// Création d'une salle (admin)\n    async createRoom(roomData) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/salles\", roomData);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.createRoom(roomData));\n    }\n    /// Modification d'une salle (admin)\n    async updateRoom(roomId, roomData) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.put(\"/salles/\".concat(roomId), roomData);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.updateRoom(roomId, roomData));\n    }\n    /// Mise hors service d'une salle (admin)\n    async setRoomOutOfService(roomId) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/salles/\".concat(roomId, \"/hors-service\"));\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.setRoomOutOfService(roomId));\n    }\n    /// Remise en service d'une salle (admin)\n    async setRoomInService(roomId) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/salles/\".concat(roomId, \"/en-service\"));\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.setRoomInService(roomId));\n    }\n    /// Suppression d'une salle (admin)\n    async deleteRoom(roomId) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.delete(\"/salles/\".concat(roomId));\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.deleteRoom(roomId));\n    }\n    // ==================== ENDPOINTS DES RÉSERVATIONS ====================\n    /// Création d'une réservation\n    async createReservation(reservationData) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/reservations\", reservationData);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.createReservation(reservationData));\n    }\n    /// Récupération des réservations de l'utilisateur\n    async getMyReservations() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/reservations/mes-reservations\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getMyReservations());\n    }\n    /// Récupération de toutes les réservations (admin)\n    async getAllReservations() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/reservations/all\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getAllReservations());\n    }\n    /// Annulation d'une réservation\n    async cancelReservation(reservationId) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.delete(\"/reservations/\".concat(reservationId));\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.cancelReservation(reservationId));\n    }\n    /// Création d'une réservation prioritaire (admin)\n    async createPriorityReservation(reservationData) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/reservations/prioritaire\", reservationData);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.createPriorityReservation(reservationData));\n    }\n    /// Récupération des statistiques des réservations (admin)\n    async getReservationStats() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/reservations/stats\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getReservationStats());\n    }\n    // ==================== ENDPOINTS DES UTILISATEURS ====================\n    /// Récupération de tous les utilisateurs (admin)\n    async getUsers() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/utilisateurs\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getUsers());\n    }\n    /// Récupération d'un utilisateur (admin)\n    async getUser(userId) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/utilisateurs/\".concat(userId));\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getUser(userId));\n    }\n    /// Création d'un utilisateur (admin)\n    async createUser(userData) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.post(\"/utilisateurs\", userData);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.createUser(userData));\n    }\n    /// Modification d'un utilisateur (admin)\n    async updateUser(userId, userData) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.put(\"/utilisateurs/\".concat(userId), userData);\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.updateUser(userId, userData));\n    }\n    /// Suppression d'un utilisateur (admin)\n    async deleteUser(userId) {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.delete(\"/utilisateurs/\".concat(userId));\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.deleteUser(userId));\n    }\n    /// Récupération des statistiques des utilisateurs (admin)\n    async getUserStats() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/utilisateurs/stats/overview\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.getUserStats());\n    }\n    // ==================== ENDPOINT DE SANTÉ ====================\n    /// Vérification de l'état du serveur\n    async healthCheck() {\n        return this.executeWithFallback(async ()=>{\n            const response = await this.api.get(\"/health\");\n            return response.data;\n        }, ()=>_mockApi__WEBPACK_IMPORTED_MODULE_1__.mockApiService.healthCheck());\n    }\n    // ==================== MÉTHODES UTILITAIRES ====================\n    /// Retourne l'état de disponibilité du backend\n    getBackendStatus() {\n        return {\n            isAvailable: this.isBackendAvailable,\n            mode: this.isBackendAvailable ? \"api\" : \"mock\"\n        };\n    }\n    /// Force une vérification de la santé du backend\n    async forceBackendCheck() {\n        this.lastBackendCheck = 0; // Reset pour forcer la vérification\n        await this.checkBackendHealth();\n    }\n    /// Nettoie les ressources\n    destroy() {\n        if (this.backendCheckInterval) {\n            clearInterval(this.backendCheckInterval);\n            this.backendCheckInterval = null;\n        }\n    }\n    constructor(){\n        this.token = null;\n        this.isBackendAvailable = true;\n        this.backendCheckInterval = null;\n        this.lastBackendCheck = 0;\n        this.BACKEND_CHECK_INTERVAL = 30000 // 30 secondes\n        ;\n        this.api = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n            baseURL: _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.API_URL,\n            timeout: _constants__WEBPACK_IMPORTED_MODULE_0__.APP_CONSTANTS.TIMEOUTS.REQUEST,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        });\n        this.setupInterceptors();\n        this.initializeAuth();\n        this.startBackendHealthCheck();\n    }\n}\n// Instance singleton de l'API\nconst apiService = new ApiService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (apiService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/mockApi.ts":
/*!****************************!*\
  !*** ./src/lib/mockApi.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mockApiService: function() { return /* binding */ mockApiService; }\n/* harmony export */ });\n/* harmony import */ var _data_users_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/data/users.json */ \"(app-pages-browser)/./src/data/users.json\");\n/* harmony import */ var _data_rooms_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/data/rooms.json */ \"(app-pages-browser)/./src/data/rooms.json\");\n/* harmony import */ var _data_reservations_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/data/reservations.json */ \"(app-pages-browser)/./src/data/reservations.json\");\n/* harmony import */ var _data_stats_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/data/stats.json */ \"(app-pages-browser)/./src/data/stats.json\");\n/* harmony import */ var _data_auth_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/data/auth.json */ \"(app-pages-browser)/./src/data/auth.json\");\n// Import des données statiques\n\n\n\n\n\n/// Service API Mock pour les tests sans backend\n/// Simule parfaitement l'API backend avec données statiques\nclass MockApiService {\n    /// Simule un délai réseau réaliste\n    async delay() {\n        let ms = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 500;\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    /// Génère un ID unique pour les nouvelles entités\n    generateId(collection) {\n        return Math.max(...collection.map((item)=>item.id), 0) + 1;\n    }\n    /// Vérifie l'authentification\n    checkAuth() {\n        if (!this.currentToken || !this.currentUser) {\n            throw new Error(\"Session expir\\xe9e. Veuillez vous reconnecter.\");\n        }\n    }\n    /// Vérifie les permissions admin\n    checkAdmin() {\n        var _this_currentUser;\n        this.checkAuth();\n        if (((_this_currentUser = this.currentUser) === null || _this_currentUser === void 0 ? void 0 : _this_currentUser.role) !== \"admin\") {\n            throw new Error(\"Acc\\xe8s r\\xe9serv\\xe9 aux administrateurs\");\n        }\n    }\n    // ==================== ENDPOINTS D'AUTHENTIFICATION ====================\n    async login(credentials) {\n        await this.delay(800);\n        const { email, mot_de_passe } = credentials;\n        const account = _data_auth_json__WEBPACK_IMPORTED_MODULE_4__.test_accounts[email];\n        if (!account || account.password !== mot_de_passe) {\n            throw new Error(\"Email ou mot de passe incorrect\");\n        }\n        this.currentUser = account.user;\n        this.currentToken = account.token;\n        return {\n            message: \"Connexion r\\xe9ussie\",\n            token: account.token,\n            user: account.user\n        };\n    }\n    async getProfile() {\n        await this.delay(300);\n        this.checkAuth();\n        return {\n            user: this.currentUser\n        };\n    }\n    async changePassword(data) {\n        await this.delay(600);\n        this.checkAuth();\n        // Simulation de validation\n        if (data.ancien_mot_de_passe === data.nouveau_mot_de_passe) {\n            throw new Error(\"Le nouveau mot de passe doit \\xeatre diff\\xe9rent de l'ancien\");\n        }\n        return {\n            message: \"Mot de passe modifi\\xe9 avec succ\\xe8s\"\n        };\n    }\n    // ==================== ENDPOINTS DES SALLES ====================\n    async getRooms() {\n        await this.delay(400);\n        this.checkAuth();\n        return {\n            salles: this.rooms\n        };\n    }\n    async getAvailableRooms(date, startTime, endTime) {\n        await this.delay(600);\n        this.checkAuth();\n        // Filtrer les salles disponibles (pas de conflit de réservation)\n        const conflictingRoomIds = this.reservations.filter((r)=>r.date === date && r.statut === \"active\" && this.isTimeConflict(r.heure_debut, r.heure_fin, startTime, endTime)).map((r)=>r.salle_id);\n        const availableRooms = this.rooms.filter((room)=>room.statut === \"disponible\" && !conflictingRoomIds.includes(room.id));\n        return {\n            salles_libres: availableRooms,\n            periode: {\n                date,\n                heure_debut: startTime,\n                heure_fin: endTime\n            }\n        };\n    }\n    isTimeConflict(start1, end1, start2, end2) {\n        return start1 < end2 && end1 > start2 || start1 < end2 && end1 > end2 || start1 >= start2 && start1 < end2;\n    }\n    async getRoomReservations(roomId, date) {\n        await this.delay(400);\n        this.checkAuth();\n        const room = this.rooms.find((r)=>r.id === roomId);\n        if (!room) {\n            throw new Error(\"Salle non trouv\\xe9e\");\n        }\n        const roomReservations = this.reservations.filter((r)=>r.salle_id === roomId && r.date === date && r.statut === \"active\");\n        return {\n            salle: {\n                nom: room.nom\n            },\n            date,\n            reservations: roomReservations\n        };\n    }\n    async createRoom(roomData) {\n        await this.delay(700);\n        this.checkAdmin();\n        // Vérifier que le nom n'existe pas déjà\n        if (this.rooms.some((r)=>r.nom === roomData.nom)) {\n            throw new Error(\"Une salle avec ce nom existe d\\xe9j\\xe0\");\n        }\n        const newRoom = {\n            id: this.generateId(this.rooms),\n            nom: roomData.nom,\n            capacite: roomData.capacite,\n            statut: \"disponible\",\n            description: roomData.description,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        this.rooms.push(newRoom);\n        return {\n            message: \"Salle cr\\xe9\\xe9e avec succ\\xe8s\",\n            data: newRoom\n        };\n    }\n    async updateRoom(roomId, roomData) {\n        await this.delay(600);\n        this.checkAdmin();\n        const roomIndex = this.rooms.findIndex((r)=>r.id === roomId);\n        if (roomIndex === -1) {\n            throw new Error(\"Salle non trouv\\xe9e\");\n        }\n        // Vérifier que le nom n'est pas déjà utilisé par une autre salle\n        if (roomData.nom && this.rooms.some((r)=>r.nom === roomData.nom && r.id !== roomId)) {\n            throw new Error(\"Une autre salle utilise d\\xe9j\\xe0 ce nom\");\n        }\n        this.rooms[roomIndex] = {\n            ...this.rooms[roomIndex],\n            ...roomData,\n            updated_at: new Date().toISOString()\n        };\n        return {\n            message: \"Salle modifi\\xe9e avec succ\\xe8s\",\n            data: this.rooms[roomIndex]\n        };\n    }\n    async setRoomOutOfService(roomId) {\n        await this.delay(800);\n        this.checkAdmin();\n        const roomIndex = this.rooms.findIndex((r)=>r.id === roomId);\n        if (roomIndex === -1) {\n            throw new Error(\"Salle non trouv\\xe9e\");\n        }\n        this.rooms[roomIndex].statut = \"hors_service\";\n        this.rooms[roomIndex].updated_at = new Date().toISOString();\n        // Annuler les réservations futures\n        const cancelledCount = this.reservations.filter((r)=>r.salle_id === roomId && r.statut === \"active\" && new Date(r.date) >= new Date()).length;\n        this.reservations = this.reservations.map((r)=>r.salle_id === roomId && r.statut === \"active\" && new Date(r.date) >= new Date() ? {\n                ...r,\n                statut: \"annulee\",\n                updated_at: new Date().toISOString()\n            } : r);\n        return {\n            message: \"Salle mise hors service avec succ\\xe8s\",\n            data: {\n                reservations_annulees: cancelledCount\n            }\n        };\n    }\n    async setRoomInService(roomId) {\n        await this.delay(500);\n        this.checkAdmin();\n        const roomIndex = this.rooms.findIndex((r)=>r.id === roomId);\n        if (roomIndex === -1) {\n            throw new Error(\"Salle non trouv\\xe9e\");\n        }\n        this.rooms[roomIndex].statut = \"disponible\";\n        this.rooms[roomIndex].updated_at = new Date().toISOString();\n        return {\n            message: \"Salle remise en service avec succ\\xe8s\"\n        };\n    }\n    async deleteRoom(roomId) {\n        await this.delay(600);\n        this.checkAdmin();\n        const roomIndex = this.rooms.findIndex((r)=>r.id === roomId);\n        if (roomIndex === -1) {\n            throw new Error(\"Salle non trouv\\xe9e\");\n        }\n        // Vérifier s'il y a des réservations futures\n        const futureReservations = this.reservations.filter((r)=>r.salle_id === roomId && r.statut === \"active\" && new Date(r.date) >= new Date());\n        if (futureReservations.length > 0) {\n            throw new Error(\"Impossible de supprimer une salle avec des r\\xe9servations futures actives\");\n        }\n        this.rooms.splice(roomIndex, 1);\n        return {\n            message: \"Salle supprim\\xe9e avec succ\\xe8s\"\n        };\n    }\n    // ==================== ENDPOINTS DES RÉSERVATIONS ====================\n    async createReservation(reservationData) {\n        await this.delay(800);\n        this.checkAuth();\n        // Vérifier que la salle existe et est disponible\n        const room = this.rooms.find((r)=>r.id === reservationData.salle_id);\n        if (!room) {\n            throw new Error(\"Salle non trouv\\xe9e\");\n        }\n        if (room.statut !== \"disponible\") {\n            throw new Error(\"Salle non disponible\");\n        }\n        // Vérifier les conflits\n        const hasConflict = this.reservations.some((r)=>r.salle_id === reservationData.salle_id && r.date === reservationData.date && r.statut === \"active\" && this.isTimeConflict(r.heure_debut, r.heure_fin, reservationData.heure_debut, reservationData.heure_fin));\n        if (hasConflict) {\n            throw new Error(\"Cr\\xe9neau d\\xe9j\\xe0 r\\xe9serv\\xe9\");\n        }\n        const newReservation = {\n            id: this.generateId(this.reservations),\n            utilisateur_id: this.currentUser.id,\n            salle_id: reservationData.salle_id,\n            date: reservationData.date,\n            heure_debut: reservationData.heure_debut,\n            heure_fin: reservationData.heure_fin,\n            statut: \"active\",\n            motif: reservationData.motif,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            utilisateur_nom: this.currentUser.nom,\n            utilisateur_email: this.currentUser.email,\n            utilisateur_telephone: this.currentUser.telephone,\n            salle_nom: room.nom,\n            salle_capacite: room.capacite\n        };\n        this.reservations.push(newReservation);\n        return {\n            message: \"R\\xe9servation cr\\xe9\\xe9e avec succ\\xe8s\",\n            data: newReservation\n        };\n    }\n    async getMyReservations() {\n        await this.delay(500);\n        this.checkAuth();\n        const myReservations = this.reservations.filter((r)=>r.utilisateur_id === this.currentUser.id);\n        return {\n            reservations: myReservations\n        };\n    }\n    async getAllReservations() {\n        await this.delay(600);\n        this.checkAdmin();\n        return {\n            reservations: this.reservations\n        };\n    }\n    async cancelReservation(reservationId) {\n        await this.delay(500);\n        this.checkAuth();\n        const reservationIndex = this.reservations.findIndex((r)=>r.id === reservationId);\n        if (reservationIndex === -1) {\n            throw new Error(\"R\\xe9servation non trouv\\xe9e\");\n        }\n        const reservation = this.reservations[reservationIndex];\n        // Vérifier les permissions\n        if (this.currentUser.role !== \"admin\" && reservation.utilisateur_id !== this.currentUser.id) {\n            throw new Error(\"Acc\\xe8s non autoris\\xe9\");\n        }\n        if (reservation.statut !== \"active\") {\n            throw new Error(\"Cette r\\xe9servation ne peut pas \\xeatre annul\\xe9e\");\n        }\n        this.reservations[reservationIndex] = {\n            ...reservation,\n            statut: \"annulee\",\n            updated_at: new Date().toISOString()\n        };\n        return {\n            message: \"R\\xe9servation annul\\xe9e avec succ\\xe8s\"\n        };\n    }\n    async createPriorityReservation(reservationData) {\n        await this.delay(900);\n        this.checkAdmin();\n        // Annuler les réservations en conflit\n        const conflictingReservations = this.reservations.filter((r)=>r.salle_id === reservationData.salle_id && r.date === reservationData.date && r.statut === \"active\" && this.isTimeConflict(r.heure_debut, r.heure_fin, reservationData.heure_debut, reservationData.heure_fin));\n        conflictingReservations.forEach((conflict)=>{\n            const index = this.reservations.findIndex((r)=>r.id === conflict.id);\n            if (index !== -1) {\n                this.reservations[index] = {\n                    ...this.reservations[index],\n                    statut: \"annulee\",\n                    updated_at: new Date().toISOString()\n                };\n            }\n        });\n        // Créer la réservation prioritaire\n        const room = this.rooms.find((r)=>r.id === reservationData.salle_id);\n        const newReservation = {\n            id: this.generateId(this.reservations),\n            utilisateur_id: this.currentUser.id,\n            salle_id: reservationData.salle_id,\n            date: reservationData.date,\n            heure_debut: reservationData.heure_debut,\n            heure_fin: reservationData.heure_fin,\n            statut: \"active\",\n            motif: reservationData.motif,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            utilisateur_nom: this.currentUser.nom,\n            utilisateur_email: this.currentUser.email,\n            utilisateur_telephone: this.currentUser.telephone,\n            salle_nom: room.nom,\n            salle_capacite: room.capacite\n        };\n        this.reservations.push(newReservation);\n        return {\n            message: \"R\\xe9servation prioritaire cr\\xe9\\xe9e avec succ\\xe8s\",\n            data: {\n                reservation: newReservation,\n                reservations_annulees: conflictingReservations.length\n            }\n        };\n    }\n    async getReservationStats() {\n        await this.delay(400);\n        this.checkAdmin();\n        return _data_stats_json__WEBPACK_IMPORTED_MODULE_3__.reservation_stats;\n    }\n    // ==================== ENDPOINTS DES UTILISATEURS ====================\n    async getUsers() {\n        await this.delay(500);\n        this.checkAdmin();\n        return {\n            utilisateurs: this.users\n        };\n    }\n    async getUser(userId) {\n        await this.delay(300);\n        this.checkAdmin();\n        const user = this.users.find((u)=>u.id === userId);\n        if (!user) {\n            throw new Error(\"Utilisateur non trouv\\xe9\");\n        }\n        return {\n            utilisateur: user\n        };\n    }\n    async createUser(userData) {\n        await this.delay(700);\n        this.checkAdmin();\n        // Vérifier que l'email n'existe pas déjà\n        if (this.users.some((u)=>u.email === userData.email)) {\n            throw new Error(\"Un utilisateur avec cet email existe d\\xe9j\\xe0\");\n        }\n        const newUser = {\n            id: this.generateId(this.users),\n            nom: userData.nom,\n            email: userData.email,\n            role: userData.role,\n            telephone: userData.telephone,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n        this.users.push(newUser);\n        return {\n            message: \"Utilisateur cr\\xe9\\xe9 avec succ\\xe8s\",\n            data: newUser\n        };\n    }\n    async updateUser(userId, userData) {\n        await this.delay(600);\n        this.checkAdmin();\n        const userIndex = this.users.findIndex((u)=>u.id === userId);\n        if (userIndex === -1) {\n            throw new Error(\"Utilisateur non trouv\\xe9\");\n        }\n        // Vérifier que l'email n'est pas déjà utilisé par un autre utilisateur\n        if (userData.email && this.users.some((u)=>u.email === userData.email && u.id !== userId)) {\n            throw new Error(\"Un autre utilisateur utilise d\\xe9j\\xe0 cet email\");\n        }\n        this.users[userIndex] = {\n            ...this.users[userIndex],\n            ...userData,\n            updated_at: new Date().toISOString()\n        };\n        return {\n            message: \"Utilisateur modifi\\xe9 avec succ\\xe8s\",\n            data: this.users[userIndex]\n        };\n    }\n    async deleteUser(userId) {\n        await this.delay(600);\n        this.checkAdmin();\n        const userIndex = this.users.findIndex((u)=>u.id === userId);\n        if (userIndex === -1) {\n            throw new Error(\"Utilisateur non trouv\\xe9\");\n        }\n        const user = this.users[userIndex];\n        // Empêcher la suppression du dernier admin\n        if (user.role === \"admin\") {\n            const adminCount = this.users.filter((u)=>u.role === \"admin\").length;\n            if (adminCount <= 1) {\n                throw new Error(\"Impossible de supprimer le dernier administrateur\");\n            }\n        }\n        // Vérifier s'il y a des réservations futures\n        const futureReservations = this.reservations.filter((r)=>r.utilisateur_id === userId && r.statut === \"active\" && new Date(r.date) >= new Date());\n        if (futureReservations.length > 0) {\n            throw new Error(\"Impossible de supprimer un utilisateur avec des r\\xe9servations futures actives\");\n        }\n        this.users.splice(userIndex, 1);\n        return {\n            message: \"Utilisateur supprim\\xe9 avec succ\\xe8s\"\n        };\n    }\n    async getUserStats() {\n        await this.delay(400);\n        this.checkAdmin();\n        return _data_stats_json__WEBPACK_IMPORTED_MODULE_3__.user_stats;\n    }\n    // ==================== ENDPOINT DE SANTÉ ====================\n    async healthCheck() {\n        await this.delay(200);\n        return {\n            status: \"OK\",\n            message: \"API Mock fonctionnelle\",\n            timestamp: new Date().toISOString(),\n            mode: \"mock\"\n        };\n    }\n    // ==================== MÉTHODES UTILITAIRES ====================\n    setAuthToken(token) {\n        this.currentToken = token;\n        // Retrouver l'utilisateur associé au token\n        for (const [email, account] of Object.entries(_data_auth_json__WEBPACK_IMPORTED_MODULE_4__.test_accounts)){\n            if (account.token === token) {\n                this.currentUser = account.user;\n                break;\n            }\n        }\n    }\n    clearAuth() {\n        this.currentToken = null;\n        this.currentUser = null;\n    }\n    constructor(){\n        this.currentUser = null;\n        this.currentToken = null;\n        this.users = [\n            ..._data_users_json__WEBPACK_IMPORTED_MODULE_0__.users\n        ];\n        this.rooms = [\n            ..._data_rooms_json__WEBPACK_IMPORTED_MODULE_1__.salles\n        ];\n        this.reservations = [\n            ..._data_reservations_json__WEBPACK_IMPORTED_MODULE_2__.reservations\n        ];\n    }\n}\n// Instance singleton de l'API Mock\nconst mockApiService = new MockApiService();\n/* harmony default export */ __webpack_exports__[\"default\"] = (mockApiService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mockApi.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/data/auth.json":
/*!****************************!*\
  !*** ./src/data/auth.json ***!
  \****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = /*#__PURE__*/JSON.parse('{"test_accounts":{"admin@example.com":{"password":"admin123","user":{"id":1,"nom":"Administrateur Principal","email":"admin@example.com","role":"admin","telephone":"+237690000000","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-15T10:30:00.000Z"},"token":"mock_admin_token_12345"},"user@example.com":{"password":"user123","user":{"id":2,"nom":"Jean Dupont","email":"user@example.com","role":"utilisateur","telephone":"+237655000000","created_at":"2024-01-02T00:00:00.000Z","updated_at":"2024-01-10T14:20:00.000Z"},"token":"mock_user_token_67890"}}}');

/***/ }),

/***/ "(app-pages-browser)/./src/data/reservations.json":
/*!************************************!*\
  !*** ./src/data/reservations.json ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = /*#__PURE__*/JSON.parse('{"reservations":[{"id":1,"utilisateur_id":2,"salle_id":1,"date":"2024-01-20","heure_debut":"09:00","heure_fin":"11:00","statut":"active","motif":"Réunion équipe marketing","created_at":"2024-01-15T10:30:00.000Z","updated_at":"2024-01-15T10:30:00.000Z","utilisateur_nom":"Jean Dupont","utilisateur_email":"user@example.com","utilisateur_telephone":"+237655000000","salle_nom":"Salle de Conférence A","salle_capacite":20},{"id":2,"utilisateur_id":3,"salle_id":2,"date":"2024-01-21","heure_debut":"14:00","heure_fin":"16:00","statut":"active","motif":"Formation nouveaux employés","created_at":"2024-01-16T09:15:00.000Z","updated_at":"2024-01-16T09:15:00.000Z","utilisateur_nom":"Marie Martin","utilisateur_email":"marie.martin@example.com","utilisateur_telephone":"+237677123456","salle_nom":"Salle de Réunion B","salle_capacite":8},{"id":3,"utilisateur_id":4,"salle_id":3,"date":"2024-01-19","heure_debut":"10:30","heure_fin":"12:00","statut":"terminee","motif":"Brainstorming projet X","created_at":"2024-01-14T16:45:00.000Z","updated_at":"2024-01-19T12:00:00.000Z","utilisateur_nom":"Pierre Durand","utilisateur_email":"pierre.durand@example.com","utilisateur_telephone":"+237688987654","salle_nom":"Salle de Créativité C","salle_capacite":6},{"id":4,"utilisateur_id":2,"salle_id":4,"date":"2024-01-22","heure_debut":"15:00","heure_fin":"17:00","statut":"active","motif":"Présentation clients","created_at":"2024-01-17T11:20:00.000Z","updated_at":"2024-01-17T11:20:00.000Z","utilisateur_nom":"Jean Dupont","utilisateur_email":"user@example.com","utilisateur_telephone":"+237655000000","salle_nom":"Salle Exécutive D","salle_capacite":12},{"id":5,"utilisateur_id":5,"salle_id":5,"date":"2024-01-18","heure_debut":"08:00","heure_fin":"09:30","statut":"annulee","motif":"Réunion hebdomadaire","created_at":"2024-01-15T08:00:00.000Z","updated_at":"2024-01-17T15:30:00.000Z","utilisateur_nom":"Sophie Bernard","utilisateur_email":"sophie.bernard@example.com","utilisateur_telephone":"+237699876543","salle_nom":"Espace Coworking E","salle_capacite":15},{"id":6,"utilisateur_id":3,"salle_id":1,"date":"2024-01-23","heure_debut":"13:00","heure_fin":"14:30","statut":"active","motif":"Conférence téléphonique internationale","created_at":"2024-01-18T10:00:00.000Z","updated_at":"2024-01-18T10:00:00.000Z","utilisateur_nom":"Marie Martin","utilisateur_email":"marie.martin@example.com","utilisateur_telephone":"+237677123456","salle_nom":"Salle de Conférence A","salle_capacite":20}]}');

/***/ }),

/***/ "(app-pages-browser)/./src/data/rooms.json":
/*!*****************************!*\
  !*** ./src/data/rooms.json ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = /*#__PURE__*/JSON.parse('{"salles":[{"id":1,"nom":"Salle de Conférence A","capacite":20,"statut":"disponible","description":"Grande salle avec projecteur et système audio professionnel","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-10T00:00:00.000Z"},{"id":2,"nom":"Salle de Réunion B","capacite":8,"statut":"disponible","description":"Salle moyenne pour réunions d\'équipe avec tableau blanc","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-08T00:00:00.000Z"},{"id":3,"nom":"Salle de Créativité C","capacite":6,"statut":"disponible","description":"Espace collaboratif avec tableau blanc et matériel de brainstorming","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-12T00:00:00.000Z"},{"id":4,"nom":"Salle Exécutive D","capacite":12,"statut":"disponible","description":"Salle haut de gamme pour réunions importantes avec équipement premium","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-14T00:00:00.000Z"},{"id":5,"nom":"Espace Coworking E","capacite":15,"statut":"disponible","description":"Espace ouvert pour travail collaboratif avec zones modulables","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-11T00:00:00.000Z"},{"id":6,"nom":"Salle Formation F","capacite":25,"statut":"maintenance","description":"Grande salle de formation avec équipement multimédia","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-15T00:00:00.000Z"},{"id":7,"nom":"Bureau Privé G","capacite":4,"statut":"hors_service","description":"Petit bureau pour réunions confidentielles","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-13T00:00:00.000Z"}]}');

/***/ }),

/***/ "(app-pages-browser)/./src/data/stats.json":
/*!*****************************!*\
  !*** ./src/data/stats.json ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = /*#__PURE__*/JSON.parse('{"reservation_stats":{"statistiques":{"total_reservations":25,"reservations_actives":12,"reservations_annulees":3,"reservations_futures":8,"reservations_aujourd_hui":2},"salles_populaires":[{"nom":"Salle de Conférence A","nombre_reservations":8},{"nom":"Salle de Réunion B","nombre_reservations":6},{"nom":"Salle Exécutive D","nombre_reservations":5},{"nom":"Espace Coworking E","nombre_reservations":4},{"nom":"Salle de Créativité C","nombre_reservations":2}]},"user_stats":{"statistiques":{"total_utilisateurs":15,"total_admins":3,"total_utilisateurs_normaux":12,"nouveaux_utilisateurs_30j":5},"utilisateurs_actifs":[{"nom":"Jean Dupont","email":"user@example.com","nombre_reservations":8},{"nom":"Marie Martin","email":"marie.martin@example.com","nombre_reservations":6},{"nom":"Pierre Durand","email":"pierre.durand@example.com","nombre_reservations":4},{"nom":"Sophie Bernard","email":"sophie.bernard@example.com","nombre_reservations":3}]}}');

/***/ }),

/***/ "(app-pages-browser)/./src/data/users.json":
/*!*****************************!*\
  !*** ./src/data/users.json ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = /*#__PURE__*/JSON.parse('{"users":[{"id":1,"nom":"Administrateur Principal","email":"admin@example.com","role":"admin","telephone":"+237690000000","created_at":"2024-01-01T00:00:00.000Z","updated_at":"2024-01-15T10:30:00.000Z"},{"id":2,"nom":"Jean Dupont","email":"user@example.com","role":"utilisateur","telephone":"+237655000000","created_at":"2024-01-02T00:00:00.000Z","updated_at":"2024-01-10T14:20:00.000Z"},{"id":3,"nom":"Marie Martin","email":"marie.martin@example.com","role":"utilisateur","telephone":"+237677123456","created_at":"2024-01-03T00:00:00.000Z","updated_at":"2024-01-12T09:15:00.000Z"},{"id":4,"nom":"Pierre Durand","email":"pierre.durand@example.com","role":"utilisateur","telephone":"+237688987654","created_at":"2024-01-04T00:00:00.000Z","updated_at":"2024-01-14T16:45:00.000Z"},{"id":5,"nom":"Sophie Bernard","email":"sophie.bernard@example.com","role":"admin","telephone":"+237699876543","created_at":"2024-01-05T00:00:00.000Z","updated_at":"2024-01-13T11:30:00.000Z"}]}');

/***/ })

});